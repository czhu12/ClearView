import Head from 'next/head'
import Header from '../src/components/Header'
import styles from '../styles/Home.module.css'
import Webcam from 'react-webcam';
import { useEffect, useRef, useState } from 'react';
import { PipelineBuilder } from '../src/utils/Pipeline';
import { Button, Container, Form } from 'react-bootstrap';
import ExplainReasons from '../src/components/ExplainReasons';
import { testTypeOptions } from '../src/components/Search';
import Select from 'react-select';
import { ToastContainer, toast } from 'react-toastify';
const CAMERA_DIMENSION = 500;

let pipeline;
export default function Predict() {
  const [testType, setTestType] = useState(null);
  const [successfulCapture, setSuccessfulCapture] = useState(false);
  const [explain, setExplain] = useState(false);
  const explainRef = useRef(explain)
  const [result, setResult] = useState(null);
  const webcamRef = useRef(null);
  const initializePipeline = async () => {
    if (testType) {
      pipeline = await PipelineBuilder.loadFromPath(`/configs/${testType}.json`)
    }
  }
  
  const handleExplain = () => {
    setExplain(!explain)
    explainRef.current = !explain;
  }

  const makePrediction = async (base64) => {
    const state = { base64, forWebcam: true }
    const { result: _result, outputs } = await pipeline.execute(state);
    setResult({outputs, state});
    if (_result) {
      setSuccessfulCapture(true);
    }
  }

  const makeFullPrediction = async () => {
    const state = { ...result.state, forWebcam: false };
    const { result: _result, outputs } = await pipeline.execute(state);
    setResult({outputs, state, result: _result});
  }

  useEffect(() => {
    if (successfulCapture) {
      toast.success("Processing Result");
      handleExplain();
      makeFullPrediction();
    }
  }, [successfulCapture])

  useEffect(() => {
    if (typeof window !== "undefined" && testType) {
      initializePipeline();
      const prediction = setInterval(() => {
        if (pipeline && webcamRef.current && !explainRef.current) {
          const base64 = webcamRef.current.getScreenshot();
          makePrediction(base64);  
        }
      }, 300);
      return () => {
        clearInterval(prediction);
      }
    }
  }, [testType]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Predict</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Container style={{maxWidth: "560px"}} className="py-4 px-4" id="self-checkout">
        <h3>Select type</h3>
        <Select
          value={testTypeOptions.find(option => option.value == testType)}
          onChange={(e) => setTestType(e.value)}
          options={testTypeOptions}
        />
        {testType && 
          <>
            <h3 className="my-5">Hold the test in front of the camera</h3>
            <div className="mb-4" style={{width: "max-content"}}>
              <div className="camera-wrapper">
                <div className="camera-image-overlay">
                  <img src={`/images/${testType}/transparent-full-outline-dotted.png`} />
                </div>
                <Webcam
                  audio={false}
                  ref={webcamRef}
                  screenshotFormat="image/jpeg"
                  videoConstraints={{
                    width: CAMERA_DIMENSION,
                    height: CAMERA_DIMENSION,
                    facingMode: "environment"
                  }}
                  style={{ cursor: "pointer" }}
                />
                <div className="clearfix"></div>
              </div>
            </div>
            <div>
              {result && (
                <div>
                  <Button onClick={() => {
                    const base64 = webcamRef.current.getScreenshot();
                    makePrediction(base64);  
                  }}>
                    Capture
                  </Button>
                  <ExplainReasons result={result} />
                  <Button onClick={() => setResult(null)}>
                    Clear
                  </Button>
                </div>
              )}
            </div>
          </>
        }
        <ToastContainer position="top-right" autoClose={5000} />
      </Container>
    </div>
  )
}