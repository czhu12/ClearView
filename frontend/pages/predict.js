import Head from 'next/head'
import Header from '../src/components/Header'
import styles from '../styles/Home.module.css'
import Webcam from 'react-webcam';
import { useEffect, useRef, useState } from 'react';
import { PipelineBuilder } from '../src/utils/Pipeline';
import { Button, Container, Form } from 'react-bootstrap';
import ExplainReasons from '../src/components/ExplainReasons';
const CAMERA_DIMENSION = 500;

let pipeline;
export default function Predict() {
  const [explain, setExplain] = useState(false);
  const explainRef = useRef(explain)
  const [result, setResult] = useState(null);
  const webcamRef = useRef(null);
  const initializePipeline = async () => {
    pipeline = await PipelineBuilder.loadFromPath("/configs/abbott.json")
  }
  const makePrediction = async (base64) => {
    const state = { base64 }
    const { result, reasons } = await pipeline.execute(state);
    setResult({reasons: reasons, state});
  }
  useEffect(() => {
    if (typeof window !== "undefined") {
      initializePipeline();
      setInterval(() => {
        if (pipeline && webcamRef.current && !explainRef.current) {
          const base64 = webcamRef.current.getScreenshot();
          makePrediction(base64);  
        }
      }, 300);
    }
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Predict</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Container style={{maxWidth: "560px"}} className="py-4 px-4" id="self-checkout">
        <h3 className="my-5">Hold the test in front of the camera</h3>
        <div className="mb-4" style={{width: "max-content"}}>
          <div className="camera-wrapper">
            <div className="camera-image-overlay">
              <img src={"/images/abbott/transparent-full-outline-dotted.png"} />
            </div>
            <Webcam
              audio={false}
              ref={webcamRef}
              screenshotFormat="image/jpeg"
              videoConstraints={{
                width: CAMERA_DIMENSION,
                height: CAMERA_DIMENSION,
                facingMode: "environment"
              }}
              style={{ cursor: "pointer" }}
            />
            <div className="clearfix"></div>
          </div>
        </div>
        <div>
          <Form.Check
            type="checkbox"
            label="Explain what happened"
            onChange={() => {
              setExplain(!explain)
              explainRef.current = !explain;
            }}
            value={explain}
          />
          {explain && (
            <div>
              <Button onClick={() => {
                const base64 = webcamRef.current.getScreenshot();
                makePrediction(base64);  
              }}>
                Capture
              </Button>
              <ExplainReasons result={result} />
              <Button onClick={() => setResult(null)}>
                Clear
              </Button>
            </div>
          )}
        </div>
      </Container>
    </div>
  )
}